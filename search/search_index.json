{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trencad\u00eds RTL \ud83c\udfa8","text":"<p>An open-source collection of SystemVerilog IP cores, crafted with the trencad\u00eds philosophy: modular, artistic, and functional.</p>"},{"location":"#the-trencadis-philosophy","title":"The Trencad\u00eds Philosophy","text":"<p>This project is inspired by \"trencad\u00eds\", the iconic mosaic technique popularized by Catalan modernist architect Antoni Gaud\u00ed. The philosophy is to create a complex, beautiful, and functional whole by artfully assembling smaller, individual pieces\u2014in this case, hardware IP cores.</p> <p></p> <p>Each module in this repository is designed to be one of those well-crafted fragments: robust, self-contained, and easy to integrate. They are the building blocks for creating your own custom System-on-Chip (SoC) masterpieces.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>-Core/Wrapper Architecture: Peripherals are decoupled into a bus-agnostic core and bus-specific wrappers (Wishbone, APB, etc.) for maximum reusability.</p> <p>-Multi-Bus Support: Designed for broad compatibility, natively supporting Wishbone and planned support for AMBA buses like APB and AXI4-Lite.</p> <p>-Hierarchical IP Library: Organized into five distinct categories: Peripherals, Drivers, Algorithms, Arithmetic, and Components.</p> <p>-Highly Configurable: Utilizes SystemVerilog generate and parameters to create flexible and silicon-efficient modules.</p> <p>-Open Source: Licensed under the permissive MIT License, allowing unrestricted use in both hobbyist and commercial projects.</p> <p>-Documented &amp; Tested: Each module is accompanied by documentation and a dedicated testbench.</p>"},{"location":"#reusable-components","title":"Reusable Components","text":"<p>A library of smaller, general-purpose building blocks located in the <code>rtl/components/</code> directory. These are the \"mortar\" holding the mosaic together.</p> <ul> <li>Register Files</li> <li>Shift Registers</li> <li>Synchronizers (for Clock Domain Crossing)</li> <li>Asynchronous &amp; Synchronous FIFOs</li> <li>Button Debouncers</li> <li>... and more to come!</li> </ul>"},{"location":"#ip-library-structure","title":"IP Library Structure","text":"<p>The Trencad\u00eds library is organized into five logical categories, representing a full stack of hardware design needs.</p> <p>Status Legend: \u274c Planned | \ud83d\udfe1 In Development | \u2705 Implemented &amp; Verified</p>"},{"location":"#peripherals","title":"Peripherals","text":"<p>General-purpose peripherals that provide standard functionalities in an SoC. Each consists of a <code>core</code> and at least one bus <code>wrapper</code>.</p>   ### Drivers  Hardware offload engines designed to manage complex communication with specific external ICs, freeing up the CPU.    ### Algorithms  Complex, application-specific hardware accelerators for computationally intensive tasks.  |    Algorithm    |   Status   |                      Descriprion                      |  | :--------------: | :--------: | :----------------------------------------------------: |  |  **FFT**  | \u274c Planned |      Fast Fourier Transform for signal processing      |  |  **EKF**  | \u274c Planned |  Extended Kalman Filter for sensor fusion (e.g., IMU)  |  | **CORDIC** | \u274c Planned | Computes trigonometric functions using shifts and adds |  ### Arithmetic &amp; Components  The fundamental building blocks (components) and computational units (arithmetic) used to construct the higher-level modules. This includes FIFOs, Synchronizers, Shift Registers, ALUs, FPUs, and more.  ## Getting Started  Integrating a `Trencad\u00eds` module into your project is straightforward. The `rtl/` directory is organized into full-featured peripherals (e.g., `gpio/`, `i2c/`) and general-purpose building blocks found in the `rtl/components/` directory.  1.**Clone the repository:**  <pre><code>   git clone https://github.com/Bubi2001/Trencadis-RTL.git\n</code></pre>  2.**Copy the core's directory or file** from the `rtl/` folder into your project's source tree.  3.**Instantiate the module** in your design.  <pre><code>    // Example 1: Instantiating a simple component\n\n    trencadis_shift_register #(\n\n        .WIDTH (16)\n\n    ) i_shifter (\n\n    .clk      (clk),\n\n    .rst      (rst),\n\n    /*...*/\n\n    );\n\n\n    // Example 2: Instantiating a Wishbone-wrapped peripheral\n\n    trencadis_uart_wb #(\n\n        .DEFAULT_BAUD (115200)\n\n    ) i_uart (\n\n        // Wishbone Bus Interface\n\n        .wb_clk_i   (clk),\n\n        .wb_rst_i   (rst),\n\n        /*...*/\n\n        // UART Physical Interface\n\n        .uart_txd_o (uart_tx),\n\n        .uart_rxd_i (uart_rx)\n\n    );\n</code></pre>  4. For complete systems demonstrating the use of peripherals, please see the projects in the `/examples` directory.  ## The Gaud\u00ed Suite  `Trencad\u00eds-RTL` is the foundational library for a larger suite of projects that follow the \"Electronic Modernism\" philosophy:  - [**`Vitrall`**](https://github.com/Bubi2001/Vitrall): A RISC-V CPU core, the artistic and logical centerpiece of the system. - [**`La Pedrera`**](https://github.com/Bubi2001/La-Pedrera): A complete SoC built with `Vitrall` and `Trencad\u00eds` cores, implemented on FPGA as a functional masterpiece. - [**`Badalot`**](https://github.com/Bubi2001/Badalot): An example implementation of the full library as a balancing robot on a single chip (SoC: *Seesaw-on-Chip*). This design handles the entire control loop in hardware\u2014from IMU sensor fusion with an EKF to PID control and BLDC motor driving\u2014Leaving the CPU free for high-level tasks. - [**`La Sagrada Familia`**](https://github.com/Bubi2001/La-Sagrada-Familia): The ASIC implementation of the SoC, representing the permanent, magnum opus of the design effort.  ## Contributing  Contributions are what make the open-source community amazing. If you have ideas for new modules, improvements, or bug fixes, you are welcome to:  1. Open an issue to discuss your idea. 2. Fork the repository and submit a pull request.  Please adhere to the existing coding style for consistency.  ## License  This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.  ## Acknowledgements  - To Antoni Gaud\u00ed, for an endless source of inspiration where art and engineering converge. - To the open-source hardware community (FOSSi Foundation, The OpenROAD Project, OpenCores) for democratizing silicon design."},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant 3.0","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We pledge to make our community welcoming, safe, and equitable for all.</p> <p>We are committed to fostering an environment that respects and promotes the dignity, rights, and contributions of all individuals, regardless of characteristics including race, ethnicity, caste, color, age, physical characteristics, neurodiversity, disability, sex or gender, gender identity or expression, sexual orientation, language, philosophy or religion, national or social origin, socio-economic position, level of education, or other status. The same privileges of participation are extended to everyone who participates in good faith and in accordance with this Covenant.</p>"},{"location":"CODE_OF_CONDUCT/#encouraged-behaviors","title":"Encouraged Behaviors","text":"<p>While acknowledging differences in social norms, we all strive to meet our community's expectations for positive behavior. We also understand that our words and actions may be interpreted differently than we intend based on culture, background, or native language.</p> <p>With these considerations in mind, we agree to behave mindfully toward each other and act in ways that center our shared values, including:</p> <ol> <li>Respecting the purpose of our community, our activities, and our ways of gathering.</li> <li>Engaging kindly and honestly with others.</li> <li>Respecting different viewpoints and experiences.</li> <li>Taking responsibility for our actions and contributions.</li> <li>Gracefully giving and accepting constructive feedback.</li> <li>Committing to repairing harm when it occurs.</li> <li>Behaving in other ways that promote and sustain the well-being of our community.</li> </ol>"},{"location":"CODE_OF_CONDUCT/#restricted-behaviors","title":"Restricted Behaviors","text":"<p>We agree to restrict the following behaviors in our community. Instances, threats, and promotion of these behaviors are violations of this Code of Conduct.</p> <ol> <li>Harassment. Violating explicitly expressed boundaries or engaging in unnecessary personal attention after any clear request to stop.</li> <li>Character attacks. Making insulting, demeaning, or pejorative comments directed at a community member or group of people.</li> <li>Stereotyping or discrimination. Characterizing anyone\u2019s personality or behavior on the basis of immutable identities or traits.</li> <li>Sexualization. Behaving in a way that would generally be considered inappropriately intimate in the context or purpose of the community.</li> <li>Violating confidentiality. Sharing or acting on someone's personal or private information without their permission.</li> <li>Endangerment. Causing, encouraging, or threatening violence or other harm toward any person or group.</li> <li>Behaving in other ways that threaten the well-being of our community.</li> </ol>"},{"location":"CODE_OF_CONDUCT/#other-restrictions","title":"Other Restrictions","text":"<ol> <li>Misleading identity. Impersonating someone else for any reason, or pretending to be someone else to evade enforcement actions.</li> <li>Failing to credit sources. Not properly crediting the sources of content you contribute.</li> <li>Promotional materials. Sharing marketing or other commercial content in a way that is outside the norms of the community.</li> <li>Irresponsible communication. Failing to responsibly present content which includes, links or describes any other restricted behaviors.</li> </ol>"},{"location":"CODE_OF_CONDUCT/#reporting-an-issue","title":"Reporting an Issue","text":"<p>Tensions can occur between community members even when they are trying their best to collaborate. Not every conflict represents a code of conduct violation, and this Code of Conduct reinforces encouraged behaviors and norms that can help avoid conflicts and minimize harm.</p> <p>When an incident does occur, it is important to report it promptly. To report a possible violation, [NOTE: describe your means of reporting here.]</p> <p>Community Moderators take reports of violations seriously and will make every effort to respond in a timely manner. They will investigate all reports of code of conduct violations, reviewing messages, logs, and recordings, or interviewing witnesses and other participants. Community Moderators will keep investigation and enforcement actions as transparent as possible while prioritizing safety and confidentiality. In order to honor these values, enforcement actions are carried out in private with the involved parties, but communicating to the whole community may be part of a mutually agreed upon resolution.</p>"},{"location":"CODE_OF_CONDUCT/#addressing-and-repairing-harm","title":"Addressing and Repairing Harm","text":"<p>[NOTE: The remedies and repairs outlined below are suggestions based on best practices in code of conduct enforcement. If your community has its own established enforcement process, be sure to edit this section to describe your own policies.]</p> <p>If an investigation by the Community Moderators finds that this Code of Conduct has been violated, the following enforcement ladder may be used to determine how best to repair harm, based on the incident's impact on the individuals involved and the community as a whole. Depending on the severity of a violation, lower rungs on the ladder may be skipped.</p> <p>1) Warning    1) Event: A violation involving a single incident or series of incidents.    2) Consequence: A private, written warning from the Community Moderators.    3) Repair: Examples of repair include a private written apology, acknowledgement of responsibility, and seeking clarification on expectations. 2) Temporarily Limited Activities    1) Event: A repeated incidence of a violation that previously resulted in a warning, or the first incidence of a more serious violation.    2) Consequence: A private, written warning with a time-limited cooldown period designed to underscore the seriousness of the situation and give the community members involved time to process the incident. The cooldown period may be limited to particular communication channels or interactions with particular community members.    3) Repair: Examples of repair may include making an apology, using the cooldown period to reflect on actions and impact, and being thoughtful about re-entering community spaces after the period is over. 3) Temporary Suspension    1) Event: A pattern of repeated violation which the Community Moderators have tried to address with warnings, or a single serious violation.    2) Consequence: A private written warning with conditions for return from suspension. In general, temporary suspensions give the person being suspended time to reflect upon their behavior and possible corrective actions.    3) Repair: Examples of repair include respecting the spirit of the suspension, meeting the specified conditions for return, and being thoughtful about how to reintegrate with the community when the suspension is lifted. 4) Permanent Ban    1) Event: A pattern of repeated code of conduct violations that other steps on the ladder have failed to resolve, or a violation so serious that the Community Moderators determine there is no way to keep the community safe with this person as a member.    2) Consequence: Access to all community spaces, tools, and communication channels is removed. In general, permanent bans should be rarely used, should have strong reasoning behind them, and should only be resorted to if working through other remedies has failed to change the behavior.    3) Repair: There is no possible repair in cases of this severity.</p> <p>This enforcement ladder is intended as a guideline. It does not limit the ability of Community Managers to use their discretion and judgment, in keeping with the best interests of our community.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public or other spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 3.0, permanently available at https://www.contributor-covenant.org/version/3/0/.</p> <p>Contributor Covenant is stewarded by the Organization for Ethical Source and licensed under CC BY-SA 4.0. To view a copy of this license, visit https://creativecommons.org/licenses/by-sa/4.0/</p> <p>For answers to common questions about Contributor Covenant, see the FAQ at https://www.contributor-covenant.org/faq. Translations are provided at https://www.contributor-covenant.org/translations. Additional enforcement and community guideline resources can be found at https://www.contributor-covenant.org/resources. The enforcement ladder was inspired by the work of Mozilla\u2019s code of conduct team.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to Trencad\u00eds RTL","text":"<p>First off, thank you for considering contributing to Trencad\u00eds RTL! It\u2019s people like you that make the open-source hardware community such an amazing place to learn, create, and inspire.</p> <p>This document provides a set of guidelines for contributing to this project. These are mostly guidelines, not strict rules. Use your best judgment, and feel free to propose changes to this document in a pull request.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by our Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior.</p>"},{"location":"CONTRIBUTING/#how-can-i-contribute","title":"How Can I Contribute?","text":"<p>There are many ways to contribute, from writing code and documentation to submitting bug reports and feature requests.</p>"},{"location":"CONTRIBUTING/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please ensure the bug was not already reported by searching on GitHub under Issues. If you're unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or test case demonstrating the expected behavior that is not occurring.</p>"},{"location":"CONTRIBUTING/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>If you have an idea for a new feature or a new module, please open an issue first to discuss it. This allows us to coordinate our efforts and prevent duplicated work. This is the best way to ensure your suggestion aligns with the project's philosophy and roadmap.</p>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>We welcome pull requests for bug fixes, new features, and documentation improvements.</p>"},{"location":"CONTRIBUTING/#development-workflow","title":"Development Workflow","text":"<ol> <li>Fork the repository to your own GitHub account.</li> <li>Clone your fork to your local machine.</li> <li>Create a new branch for your changes from the <code>main</code> branch. Please use a descriptive branch name (e.g., <code>feature/i2c-master</code> or <code>fix/gpio-interrupt-bug</code>).</li> <li>Make your changes, adhering to the style guides below.</li> <li>Verify your changes. Ensure your module passes its own self-checking testbench.</li> <li>Commit your changes with a clear and descriptive commit message.</li> <li>Push your branch to your fork on GitHub.</li> <li>Open a Pull Request (PR) to the <code>main</code> branch of the original repository. Provide a clear description of the changes and link to any relevant issues.</li> </ol>"},{"location":"CONTRIBUTING/#style-guides","title":"Style Guides","text":""},{"location":"CONTRIBUTING/#systemverilog-coding-style","title":"SystemVerilog Coding Style","text":"<p>Consistency is key. Please adhere to the following style guides for all SystemVerilog code.</p> <ul> <li>File Naming: Use <code>snake_case.sv</code> (e.g., <code>trencadis_gpio.sv</code>).</li> <li>Module Naming: Use <code>snake_case</code> with a <code>trencadis_</code> prefix (e.g., <code>module trencadis_gpio (...)</code>).</li> <li>Signal &amp; Variable Naming: Use <code>snake_case</code> (e.g., <code>logic [7:0] data_bus;</code>).</li> <li>Port Naming: Use <code>snake_case</code> with suffixes: <code>_i</code> for input, <code>_o</code> for output, <code>_io</code> for inout.</li> <li>Parameters: Use <code>UPPER_CASE</code> (e.g., <code>parameter DATA_WIDTH = 8;</code>).</li> <li>Clocking: All logic must be synchronous to a single clock named <code>clk_i</code>.</li> <li>Reset: Use a single, active-low, asynchronous reset named <code>nrst_i</code>.</li> </ul>"},{"location":"CONTRIBUTING/#verification-requirements","title":"Verification Requirements","text":"<ul> <li>Every new module must be accompanied by a corresponding self-checking testbench in the <code>verification/tb/</code> directory.</li> <li>The testbench must report a clear <code>[PASS]</code> or <code>[FAIL]</code> message at the end of the simulation.</li> <li>Any bug fix must include a test case that specifically targets the bug to demonstrate it has been fixed.</li> </ul>"},{"location":"CONTRIBUTING/#documentation-requirements","title":"Documentation Requirements","text":"<ul> <li>New peripherals or complex components must have a corresponding datasheet in Markdown format in the <code>doc/</code> directory.</li> <li>The main <code>README.md</code> file should be updated to list any new modules.</li> </ul>"},{"location":"CONTRIBUTING/#final-note","title":"Final Note","text":"<p>Thank you again for your interest in contributing. Your work helps to build a better and more open hardware ecosystem for everyone.</p>"},{"location":"datasheet_template/","title":"Datasheet: trencadis_[Module Name]","text":"<p>Version: vX.X.X Last Updated: YYYY-MM-DD</p>"},{"location":"datasheet_template/#1-overview","title":"1. Overview","text":"<p>A brief, one-paragraph description of what the module is and its main purpose. This should be the \"elevator pitch\" for your module, explaining its function and benefits at a high level.</p>"},{"location":"datasheet_template/#2-features","title":"2. Features","text":"<p>A bulleted list of the key features and capabilities. This allows a user to quickly assess if the module meets their needs.</p> <ul> <li>Comprehensive Documentation: A single, unified datasheet describes the core logic, bus-agnostic register map, and all available bus wrappers.</li> <li>Feature A (e.g., \"Wishbone B4 compliant interface\")</li> <li>Feature B (e.g., \"Fully synchronous design with a single clock domain\")</li> <li>Feature C (e.g., \"Parameterizable data width\")</li> <li>...</li> </ul>"},{"location":"datasheet_template/#3-block-diagram","title":"3. Block Diagram","text":"<p>(Optional, but highly recommended) A simple block diagram showing the main internal functional blocks and the primary I/O. This provides a clear visual representation of the module's architecture. You can create this with a free tool like diagrams.net.</p> <p><code>![Block Diagram](assets/[module_name]_diagram.png)</code></p>"},{"location":"datasheet_template/#4-logic-core-parameters-generics","title":"4. Logic Core Parameters (Generics)","text":"<p>A table describing the parameters that can be set at instantiation time to configure the module's behavior or size.</p> Parameter Type Default Description <code>WIDTH</code> <code>int</code> <code>8</code> Defines the primary data width of the module. <code>FIFO_DEPTH</code> <code>int</code> <code>32</code> Defines the number of entries in the FIFO. ..."},{"location":"datasheet_template/#5-logic-core-port-descriptions","title":"5. Logic Core Port Descriptions","text":"<p>A detailed table of all input and output ports. This is a critical section for any hardware designer who will be instantiating your module.</p> Port Name Direction Width Description <code>clk_i</code> <code>input</code> <code>1</code> System clock. All synchronous logic is clocked on this edge. <code>rst_i</code> <code>input</code> <code>1</code> System reset, synchronous, active-high. <code>data_i</code> <code>input</code> <code>WIDTH</code> Input data bus. <code>data_o</code> <code>output</code> <code>WIDTH</code> Output data bus. ..."},{"location":"datasheet_template/#6-register-map","title":"6. Register Map*","text":"<p>* (This entire section is only for bus-connected peripherals like GPIO, UART, etc.)</p> <p>This section defines the complete, bus-agnostic memory map for the peripheral. The address offsets are defined by the core logic and are consistent across all bus wrappers.</p> Address Offset Register Name R/W Description <code>0x00</code> <code>DATA_REG</code> <code>R/W</code> Data register for I/O operations. <code>0x04</code> <code>CTRL_REG</code> <code>R/W</code> Control and configuration register. <code>0x08</code> <code>STATUS_REG</code> <code>R</code> Status register for flags and interrupts."},{"location":"datasheet_template/#61-register-data_reg-offset-0x00","title":"6.1. Register: DATA_REG (Offset: <code>0x00</code>)","text":"Bits Field Name R/W Reset Value Description <code>[7:0]</code> <code>DATA_FIELD</code> <code>R/W</code> <code>0x00</code> Read/Write data field. <code>[31:8]</code> <code>RESERVED</code> <code>R</code> <code>0x0</code> Reserved. Reads as <code>0</code>. Writes are ignored."},{"location":"datasheet_template/#62-register-ctrl_reg-offset-0x04","title":"6.2. Register: CTRL_REG (Offset: <code>0x04</code>)","text":"Bits Field Name R/W Reset Value Description <code>[0]</code> <code>ENABLE</code> <code>R/W</code> <code>0b0</code> <code>1</code>: Enables the module's core logic. <code>[1]</code> <code>INT_ENABLE</code> <code>R/W</code> <code>0b0</code> <code>1</code>: Enables interrupt generation. ..."},{"location":"datasheet_template/#7-functional-description","title":"7. Functional Description","text":"<p>A detailed explanation in prose of how the module operates. This section should cover the core logic, state machines, operational modes, and any other behaviors a user needs to understand to use the module correctly.</p>"},{"location":"datasheet_template/#8-core-timing-diagrams","title":"8. Core Timing Diagrams","text":"<p>Visual diagrams showing signal interactions for key operations. Example UART output. Tools like WaveDrom are excellent for creating these directly in Markdown.</p> <p><code>![UART cts](assets/uart_cts_out.png)</code></p>"},{"location":"datasheet_template/#9-instantiation-template","title":"9. Instantiation Template","text":"<p>Here is an example of how to instantiate the trencadis_[module_name] in SystemVerilog:</p> <pre><code>    trencadis_[module_name] #(\n        .parameter1(value),\n        .parameter2(value)\n    ) i_[module_name] (\n        // generic ports\n        .clk_i(clk),\n        .rst_ni(rst_n),\n        // other ports\n        .port1_i(port1),\n        .port2_o(port2),\n        .port3_io(port3)\n    );\n</code></pre>"},{"location":"datasheet_template/#10-bus-wrappers","title":"10. Bus Wrappers","text":"<p>This section provides the necessary information to instantiate and use the core with a specific standard bus. It is purely a translation guide to the core's native interface.</p>"},{"location":"datasheet_template/#101-wishbone-wrapper-trencadis_module_name_wb","title":"10.1. Wishbone Wrapper (<code>trencadis_[module_name]_wb</code>)","text":""},{"location":"datasheet_template/#1011-wrapper-parameters","title":"10.1.1. Wrapper Parameters","text":"<p>*(Parameters specific to this wrapper, if any)</p>"},{"location":"datasheet_template/#1012-wrapper-port-descriptions","title":"10.1.2. Wrapper Port Descriptions","text":"<p>This table lists the external ports of the Wishbone-wrapped module.</p> Port Name Direction Width Description <code>wb_clk_i</code> <code>input</code> <code>1</code> Wishbone bus clock. <code>wb_rst_i</code> <code>input</code> <code>1</code> Wishbone bus reset. <code>wb_adr_i</code> <code>input</code> <code>32</code> Wishbone address bus. ... <code>uart_txd_o</code> <code>output</code> <code>1</code> Physical UART transmit pin."},{"location":"datasheet_template/#1013-wishbone-timing-diagrams","title":"10.1.3. Wishbone Timing Diagrams","text":"<p>Visual diagrams showing signal interactions for key operations. A Wishbone read/write cycle is a perfect example for peripherals. Tools like WaveDrom are excellent for creating these directly in Markdown.</p> <p><code>![Wishbone Write Cycle](assets/[module_name]_wb_write.png)</code></p>"},{"location":"datasheet_template/#1014-wishbone-instantiation-template","title":"10.1.4. Wishbone Instantiation Template","text":"<pre><code>    trencadis_[module_name]_wb #(\n        .parameter1(value),\n        .parameter2(value)\n    ) i_[module_name] (\n        // generic ports\n        .clk_i(clk),\n        .rst_ni(rst_n),\n        // wishbone ports\n        .wb_addr_i(wb_addr),\n        // other ports\n        .port1_i(port1),\n        .port2_o(port2),\n        .port3_io(port3)\n    );\n</code></pre>"},{"location":"datasheet_template/#102-apb-wrapper-trencadis_module_name_apb","title":"10.2. APB Wrapper (<code>trencadis_[module_name]_apb</code>)","text":"<p>*(This section would be structured identically to the Wishbone one, containing only the wrapper's parameters, ports, and bus-specific timing diagrams.)</p> <p>*(Add as many sections 10.x as necessary depending on the amount of bus wrappers implemented.)</p>"},{"location":"datasheet_template/#11-revision-history","title":"11. Revision History","text":"<p>A log of changes to this document and the corresponding RTL module. This is critical for tracking versions and understanding what has changed over time.</p> Version Date Author(s) Changes <code>v0.1.0</code> YYYY-MM-DD Your Name Initial draft of the datasheet. <code>v1.0.0</code> YYYY-MM-DD Your Name Updated register map and added timing diagrams."},{"location":"datasheets_md/components/trencadis_pulse_generator/","title":"Datasheet: trencadis_pulse_generator","text":"<p>Version: v1.0.0</p> <p>Last Updated: 2025-08-17</p>"},{"location":"datasheets_md/components/trencadis_pulse_generator/#1-overview","title":"1. Overview","text":"<p>The <code>trencadis_pulse_generator</code> is a simple, parameterizable hardware module designed to generate a single-cycle pulse at a configurable, periodic interval. It uses a free-running counter that resets upon reaching a user-defined maximum value. This core is ideal for creating periodic triggers, strobes, or enabling signals in digital logic designs.</p>"},{"location":"datasheets_md/components/trencadis_pulse_generator/#2-features","title":"2. Features","text":"<ul> <li>Fully synchronous design with a single clock domain.</li> <li>Parameterizable counter width (<code>SIZE</code>) to support a wide range of periods.</li> <li>Generates a pulse that is always one clock cycle wide.</li> <li>Low resource utilization, suitable for both FPGAs and ASICs.</li> <li>Active-low asynchronous reset.</li> </ul>"},{"location":"datasheets_md/components/trencadis_pulse_generator/#3-block-diagram","title":"3. Block Diagram","text":"<p>A conceptual block diagram is shown below.</p> <p></p>"},{"location":"datasheets_md/components/trencadis_pulse_generator/#4-parameters-generics","title":"4. Parameters (Generics)","text":"Parameter Type Default Description <code>SIZE</code> <code>integer</code> <code>8</code> Defines the bit width of the internal counter and the <code>max_count_i</code>input."},{"location":"datasheets_md/components/trencadis_pulse_generator/#5-logic-core-port-descriptions","title":"5. Logic Core Port Descriptions","text":"Port Name Direction Width Description <code>clk_i</code> <code>input</code> <code>1</code> System clock. All synchronous logic is clocked on the positive edge. <code>rst_ni</code> <code>input</code> <code>1</code> Asynchronous system reset, active-low. <code>max_count_i</code> <code>input</code> <code>SIZE</code> The maximum value the internal counter will reach. The period of the pulse is <code>max_count_i + 1</code> clock cycles. <code>pulse_o</code> <code>output</code> <code>1</code> Output pulse. This signal is asserted high for one clock cycle when the internal counter equals <code>max_count_i</code>."},{"location":"datasheets_md/components/trencadis_pulse_generator/#6-register-map","title":"6. Register Map*","text":"<p>* (This module is a simple logic core and does not contain a bus interface or register map.)</p>"},{"location":"datasheets_md/components/trencadis_pulse_generator/#7-functional-description","title":"7. Functional Description","text":"<p>The <code>trencadis_pulse_generator</code> operates by continuously incrementing an internal counter on each rising edge of <code>clk_i</code>. The counter starts at zero and increments until it reaches the value specified by the <code>max_count_i</code> input.</p> <p>When the counter is equal to <code>max_count_i</code>, the <code>pulse_o</code> output is driven high for that single clock cycle. On the following clock cycle, the counter resets to zero, and <code>pulse_o</code> returns low. The cycle then repeats.</p> <p>The total period of the pulse is determined by the input <code>max_count_i</code>. The formula for the period in clock cycles is:</p> <p>Period = <code>max_count_i</code> + 1</p> <p>For example, if <code>max_count_i</code> is set to <code>99</code>, a pulse will be generated every 100 clock cycles.</p> <p>If <code>max_count_i</code> is set to <code>0</code>, the counter will remain at <code>0</code> and the <code>pulse_o</code> signal will never be asserted, effectively disabling the pulse.</p>"},{"location":"datasheets_md/components/trencadis_pulse_generator/#8-core-timing-diagrams","title":"8. Core Timing Diagrams","text":"<p>The following timing diagram illustrates the behavior for <code>max_count_i = 2</code>. The counter cycles through 0, 1, and 2, and the pulse is asserted high for one cycle when the counter reaches 2. The period is 3 clock cycles.</p> <p></p>"},{"location":"datasheets_md/components/trencadis_pulse_generator/#9-instantiation-template","title":"9. Instantiation Template","text":"<p>Here is an example of how to instantiate the <code>trencadis_pulse_generator</code> in SystemVerilog:</p> <pre><code>    trencadis_pulse_generator #(\n        .SIZE(8)\n    ) i_pulse_generator (\n        // System Ports\n        .clk_i       (clk),\n        .rst_ni      (rst_n),\n        // Control Ports\n        .max_count_i (max_count_value),\n        // Output Ports\n        .pulse_o     (periodic_pulse)\n    );\n</code></pre>"},{"location":"datasheets_md/components/trencadis_pulse_generator/#10-bus-wrappers","title":"10. Bus Wrappers","text":"<p>*(This module is a simple logic core and does not have any standard bus wrappers.)</p>"},{"location":"datasheets_md/components/trencadis_pulse_generator/#11-revision-history","title":"11. Revision History","text":"<p>A log of changes to this document and the corresponding RTL module.</p> Version Date Author(s) Changes <code>v1.0.0</code> 2025-08-17 Adri\u00e0 Babiano Novella Initial release of the datasheet."},{"location":"datasheets_md/components/trencadis_register_file/","title":"Datasheet: trencadis_register_file","text":"<p>Version: v1.0.1</p> <p>Last Updated: 2025-08-16</p>"},{"location":"datasheets_md/components/trencadis_register_file/#1-overview","title":"1. Overview","text":"<p>The <code>trencadis_register_file</code> is a flexible, synthesizable SystemVerilog module that implements a high-performance register file with one synchronous write port and a parameterizable number of asynchronous read ports. It is designed to be a core component in processor designs, particularly those requiring concurrent data access, such as in the execution stage of a pipelined CPU. Key features include a configurable register count and data width, and an optional mode to enforce that register 0 is hardwired to zero, making it directly compatible with the RISC-V integer instruction set architecture (ISA).</p>"},{"location":"datasheets_md/components/trencadis_register_file/#2-features","title":"2. Features","text":"<ul> <li>Single, synchronous write port.</li> <li>Parameterizable number of asynchronous read ports.</li> <li>Parameterizable register count (<code>REG_COUNT</code>) and data width (<code>DEPTH</code>).</li> <li>Optional RISC-V compatible zero-register functionality (register at address 0 is always zero).</li> <li>Fully synchronous design with a single clock domain for writes.</li> <li>Active-low asynchronous reset to initialize all registers to zero.</li> <li>Standard \"read-before-write\" behavior for simultaneous read/write to the same address.</li> </ul>"},{"location":"datasheets_md/components/trencadis_register_file/#3-block-diagram","title":"3. Block Diagram","text":"<p>A conceptual block diagram is shown below. The number of read ports is determined by the <code>NUM_READ_PORTS</code> parameter.</p> <p></p>"},{"location":"datasheets_md/components/trencadis_register_file/#4-parameters-generics","title":"4. Parameters (Generics)","text":"Parameter Type Default Description <code>NUM_READ_PORTS</code> <code>integer</code> <code>2</code> Defines the number of concurrent read ports. <code>REG_COUNT</code> <code>integer</code> <code>32</code> Defines the total number of registers in the file. <code>DEPTH</code> <code>integer</code> <code>32</code> Defines the bit width of each individual register. <code>ZERO_REG_IS_ZERO</code> <code>bit</code> <code>1</code> If <code>1</code>, register at address <code>0</code>i s hardwired to zero. Writes to address <code>0</code> are ignored. If <code>0</code>, register <code>0</code> is a normal register."},{"location":"datasheets_md/components/trencadis_register_file/#5-port-descriptions","title":"5. Port Descriptions","text":"Port Name Direction Width Description <code>clk_i</code> <code>input</code> <code>1</code> System clock. All synchronous write logic is clocked on the positive edge of this signal. <code>rst_ni</code> <code>input</code> <code>1</code> Active-low asynchronous system reset. When asserted (<code>0</code>), all registers are cleared to zero. <code>waddr_i</code> <code>input</code> <code>$clog2(REG_COUNT)</code> Write address. Selects the register to be written to. <code>wdata_i</code> <code>input</code> <code>DEPTH</code> Write data. The data to be written into the selected register. <code>wen_i</code> <code>input</code> <code>1</code> Write enable. A high level on this signal enables a write operation on the next positive clock edge. <code>raddr_i</code> <code>input</code> <code>[NUM_READ_PORTS-1:0][$clog2(REG_COUNT)-1:0]</code> Packed array of read addresses.<code>raddr_i[n]</code> is the address for the n-th read port. <code>rdata_o</code> <code>output</code> <code>[NUM_READ_PORTS-1:0][DEPTH-1:0]</code> Packed array of read data.<code>rdata_o[n]</code> is the data output from the n-th read port. <p>Clarity note on Packed Arrays: <code>raddr_i</code>: Packed array of read addresses. For the default <code>NUM_READ_PORTS=2</code>, this is a <code>logic [1:0][$clog2(REG_COUNT)-1:0]</code> signal. <code>rdata_o</code>: Packed array of read data ports. For the default <code>NUM_READ_PORTS=2</code>, this is a <code>logic [1:0][DEPTH-1:0]</code> signal.</p>"},{"location":"datasheets_md/components/trencadis_register_file/#6-register-map","title":"6. Register Map*","text":"<p>* (This module is a simple logic core and does not contain a bus interface or register map.)</p>"},{"location":"datasheets_md/components/trencadis_register_file/#7-functional-description","title":"7. Functional Description","text":"<p>The <code>trencadis_register_file</code> module provides a simple and efficient memory structure commonly used in CPUs. Its operation is divided into three main functions: write, read, and reset.</p>"},{"location":"datasheets_md/components/trencadis_register_file/#write-operation","title":"Write Operation","text":"<p>A write operation is performed when the <code>wen</code> (write enable) signal is asserted high. On the next rising edge of <code>clk</code>, the data present on the <code>wdata</code> bus is written into the register selected by the <code>waddr</code> bus. The write is synchronous.</p> <p>If the <code>ZERO_REG_IS_ZERO</code> parameter is set to <code>1</code>, any attempt to write to address <code>0</code> (<code>waddr == '0</code>) will be ignored, and the contents of register 0 will remain zero.</p>"},{"location":"datasheets_md/components/trencadis_register_file/#read-operation","title":"Read Operation","text":"<p>Read operations are asynchronous (combinatorial). The module supports <code>NUM_READ_PORTS</code> concurrent reads. For each read port <code>i</code>, the address on <code>raddr[i]</code> is used to select a register. The contents of that register are then immediately presented on the corresponding <code>rdata[i]</code> output bus.</p> <p>If a read and a write occur to the same address in the same clock cycle, the read port will output the old data stored in the register before the write completes. This is standard \"read-before-write\" behavior.</p> <p>If the <code>ZERO_REG_IS_ZERO</code> parameter is set to <code>1</code>, any read from address <code>0</code> (<code>raddr[i] == '0</code>) will result in <code>rdata[i]</code> being driven to all zeros, regardless of the physical value stored in register 0.</p>"},{"location":"datasheets_md/components/trencadis_register_file/#reset","title":"Reset","text":"<p>The module uses an active-low asynchronous reset (<code>rst_n</code>). When <code>rst_n</code> is pulled low, all physical registers within the file are immediately and asynchronously set to zero.</p>"},{"location":"datasheets_md/components/trencadis_register_file/#8-timing-diagrams","title":"8. Timing Diagrams","text":"<p>This diagram shows a reset condition demonstrating that the output ports go to zero regardless of the clock</p> <p></p> <p>This diagram shows a simultaneous read and write to the same register address. Note that <code>rdata</code> reflects the value of the register before the write operation completes on the next rising clock edge.</p> <p></p>"},{"location":"datasheets_md/components/trencadis_register_file/#9-instatiation-template","title":"9. Instatiation Template","text":"<p>Here is an example of how to instantiate the <code>trencadis_register_file</code> in SystemVerilog:</p> <pre><code>    trencadis_register_file #(\n        .NUM_READ_PORTS(2),\n        .REG_COUNT(32),\n        .DEPTH(32),\n        .ZERO_REG_IS_ZERO(1),\n    ) i_trencadis_register_file (\n        // generic ports\n        .clk_i(clk),\n        .rst_ni(rst_n),\n        // write ports\n        .wen_i(write_enable),\n        .waddr_i(write_address),\n        .wdata_i(write_data),\n        // read ports\n        .raddr_i(read_address),   // Packed array of type logic [1:0][4:0]\n        .rdata_o(read_data)       // packed array of type logic [1:0][31:0]\n    );\n</code></pre>"},{"location":"datasheets_md/components/trencadis_register_file/#10-bus-wrappers","title":"10. Bus Wrappers*","text":"<p>*(This module is a simple logic core and does not have any standard bus wrappers.)</p>"},{"location":"datasheets_md/components/trencadis_register_file/#11-revision-history","title":"11. Revision History","text":"<p>A log of changes to this document and the corresponding RTL module.</p> Version Date Author(s) Changes <code>v1.0.0</code> 2025-08-04 Adri\u00e0 Babiano Novella Initial release of the datasheet. <code>v1.0.1</code> 2025-08-16 Adri\u00e0 Babiano Novella Update image path references and typos in document."}]}